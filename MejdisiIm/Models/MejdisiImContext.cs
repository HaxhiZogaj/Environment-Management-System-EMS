// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace MejdisiIm.Models;

public partial class MejdisiImContext : DbContext
{
    public MejdisiImContext(DbContextOptions<MejdisiImContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Comment> Comments { get; set; }

    public virtual DbSet<EnvironmentalReport> EnvironmentalReports { get; set; }

    public virtual DbSet<GreenTip> GreenTips { get; set; }

    public virtual DbSet<ContactMessage> ContactMessages { get; set; }

    public virtual DbSet<RecyclingCenter> RecyclingCenters { get; set; }

    public virtual DbSet<ReportCategory> ReportCategories { get; set; }

    public virtual DbSet<User> Users { get; set; }
    public virtual DbSet<UserSession> UserSessions { get; set; }

    public virtual DbSet<Vote> Votes { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Comment>(entity =>
        {
            entity.HasKey(e => e.CommentId).HasName("PK__Comments__C3B4DFCADF4C03D1");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Report).WithMany(p => p.Comments)
                .HasForeignKey(d => d.ReportId)
                .OnDelete(DeleteBehavior.Cascade) // Added cascade delete here
                .HasConstraintName("FK__Comments__Report__440B1D61");

            entity.HasOne(d => d.User).WithMany(p => p.Comments)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Cascade) // Added cascade delete here - if user deleted, delete comments
                .HasConstraintName("FK__Comments__UserId__44FF419A");
        });

        modelBuilder.Entity<EnvironmentalReport>(entity =>
        {
            entity.HasKey(e => e.ReportId).HasName("PK__Environm__D5BD4805A07E7D6C");

            entity.ToTable("EnvironmentalReport");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.Property(e => e.ImageUrl).HasMaxLength(255);

            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasDefaultValue("Pending");

            entity.Property(e => e.Title).HasMaxLength(100);

            entity.HasOne(d => d.Category)
                .WithMany(p => p.EnvironmentalReports)
                .HasForeignKey(d => d.CategoryId)
                .OnDelete(DeleteBehavior.Cascade)  // Already had cascade

                .HasConstraintName("FK__Environme__Categ__403A8C7D");

            entity.HasOne(d => d.User)
                .WithMany(p => p.EnvironmentalReports)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Cascade)  // Added cascade delete here - if user deleted, delete reports
                .HasConstraintName("FK__Environme__UserI__3F466844");
        });

        modelBuilder.Entity<ContactMessage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ContactM__3214EC079F7E2E80");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.FullName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Message).IsRequired();
            entity.Property(e => e.Subject).HasMaxLength(150);
        });

        modelBuilder.Entity<GreenTip>(entity =>
        {
            entity.HasKey(e => e.TipId).HasName("PK__GreenTip__2DB1A1C818AB2D8F");

            entity.ToTable("GreenTip");

            entity.Property(e => e.Category).HasMaxLength(50);
            entity.Property(e => e.Title).HasMaxLength(100);
        });

        modelBuilder.Entity<RecyclingCenter>(entity =>
        {
            entity.HasKey(e => e.CenterId).HasName("PK__Recyclin__398FC7F7930C8F3B");

            entity.ToTable("RecyclingCenter");

            entity.Property(e => e.Address).HasMaxLength(255);
            entity.Property(e => e.Contact).HasMaxLength(100);
            entity.Property(e => e.Name).HasMaxLength(100);
        });

        modelBuilder.Entity<ReportCategory>(entity =>
        {
            entity.HasKey(e => e.CategoryId).HasName("PK__ReportCa__19093A0B288C418B");

            entity.ToTable("ReportCategory");

            entity.Property(e => e.Name).HasMaxLength(100);

            // No FK here, but related EnvironmentalReports cascade on delete already set
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK__Users__1788CC4CA1C7B2EA");

            entity.HasIndex(e => e.Email, "UQ__Users__A9D105344B4A24DB").IsUnique();

            entity.Property(e => e.Email).HasMaxLength(100);
            entity.Property(e => e.FullName).HasMaxLength(100);
            entity.Property(e => e.PasswordHash).HasMaxLength(200);
            entity.Property(e => e.Role)
                .HasMaxLength(20)
                .HasDefaultValue("User");
        });

        modelBuilder.Entity<UserSession>(entity =>
        {
            entity.HasKey(e => e.SessionId);
            entity.Property(e => e.TokenHash).IsRequired();
            entity.Property(e => e.ExpiresAt).IsRequired();
            entity.HasOne(d => d.User)
                  .WithMany(p => p.UserSessions)
                  .HasForeignKey(d => d.UserId)
                  .OnDelete(DeleteBehavior.Cascade); // Already cascade
        });

        modelBuilder.Entity<Vote>(entity =>
        {
            entity.HasKey(e => e.VoteId).HasName("PK__Votes__52F015C23F4115A5");

            entity.HasIndex(e => new { e.ReportId, e.UserId }, "IX_UniqueVote").IsUnique();

            entity.Property(e => e.VotedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Report).WithMany(p => p.Votes)
                .HasForeignKey(d => d.ReportId)
                .OnDelete(DeleteBehavior.Cascade)  // Added cascade - delete votes if report deleted
                .HasConstraintName("FK__Votes__ReportId__48CFD27E");

            entity.HasOne(d => d.User).WithMany(p => p.Votes)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Cascade) // Added cascade - delete votes if user deleted
                .HasConstraintName("FK__Votes__UserId__49C3F6B7");
        });

        OnModelCreatingPartial(modelBuilder);
    }


    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}